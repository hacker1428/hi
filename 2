#include<stdio.h> 
void prims( ); 
int nearest[10], cost[10][10], t[10][2], i, j, n, k, min, u, mincost = 0; 
void main( ) 
{ 
printf("\n\n****** PRIMS ALGORITHM ******\n\n"); 
printf("Enter the number of nodes\n"); 
scanf("%d", &n); 
printf("\n\nEnter the cost matrix\n"); 
for(i=1; i<=n; i++) 
{ 
for(j=1; j<=n; j++) 
{ 
scanf("%d", &cost[i][j]); 
} 
} 
printf("\n\nThe entered cost matrix is\n"); 
for(i=1; i<=n; i++) 
{ 
for(j=1; j<=n; j++) 
{ 
printf("%d\t", cost[i][j]); 
} 
printf("\n"); 
} 
printf("\n\nMinimum Spanning Tree Edges and their costs are\n"); 
prims( ); 
printf("\n\nThe minimum spanning tree cost is %d", mincost); 
printf("\n\n*** *********** ****"); 
} 
void prims()
{ 
for(i=2; i<=n; i++) 
nearest[i]=1; //Initializing nearest nodes to all the nodes other than first node as 1 
nearest[1]=0; //Marking the first node as visited 
for(i=1; i<n; i++) 
{ 
min=99; 
for(j=1;j<=n;j++) //find a node j which can be visited with minimum cost 
{ 
/if the node j is not visited and if the cost of j to its nearest node is less than minimum/ 
if(nearest[j]!=0 && cost[j][nearest[j]]<min) 
{ 
min=cost[j][nearest[j]]; 
u=j; 
}
t[i][1] = u; // marking the node j
t[i][2] = nearest[u]; //marking the node from where we visited j 
mincost += min; //updating the minimum cost 
nearest[u] = 0; //indicating that node u=j has been visited 
/* if any of the remaining unvisited node can be reached from newly visited node with minimum cost 
then the newly visited node becomes its nearest node*/ 
for(k=1; k<=n; k++) 
{ 
if(nearest[k] != 0 && cost[k][nearest[k]] > cost[k][u]) 
nearest[k] = u; 
} 
printf("%d) edge (%d,%d) , cost %d\n", i, t[i][1], t[i][2], min); 
} 
}
